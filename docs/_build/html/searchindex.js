Search.setIndex({"alltitles": {"Advanced Analysis with MDR:": [[3, "advanced-analysis-with-mdr"]], "Basic Example": [[8, "basic-example"]], "Extensibility for Integration:": [[3, "extensibility-for-integration"]], "Indices and tables": [[7, "indices-and-tables"]], "Installation": [[8, "installation"]], "Installation Guide": [[7, null], [8, null]], "Key Components:": [[3, "key-components"]], "Key functionalities": [[7, "key-functionalities"]], "MDR module": [[3, "module-MED3pa.med3pa.mdr"]], "Overview": [[1, "overview"], [2, "overview"], [3, "overview"], [4, "overview"], [7, "overview"]], "Prerequisites": [[8, "prerequisites"]], "Profiles module": [[3, "module-MED3pa.med3pa.profiles"]], "Running the MED3pa Experiment": [[9, "running-the-med3pa-experiment"]], "Running the MED3pa and Detectron Experiment": [[9, "running-the-med3pa-and-detectron-experiment"]], "Software Engineering Principles": [[7, "software-engineering-principles"]], "Step 1: Importing Necessary Modules": [[5, "step-1-importing-necessary-modules"], [10, "step-1-importing-necessary-modules"]], "Step 1: Importing the DatasetsManager": [[5, "step-1-importing-the-datasetsmanager"]], "Step 1: Install via pip": [[8, "step-1-install-via-pip"]], "Step 1: Setting up the Datasets": [[6, "step-1-setting-up-the-datasets"], [9, "step-1-setting-up-the-datasets"]], "Step 1: Training the Model": [[10, "step-1-training-the-model"]], "Step 2: Configuring the Model": [[6, "step-2-configuring-the-model"], [9, "step-2-configuring-the-model"]], "Step 2: Creating an Instance of DatasetsManager": [[5, "step-2-creating-an-instance-of-datasetsmanager"]], "Step 2: Creating an Instance of ModelFactory": [[10, "step-2-creating-an-instance-of-modelfactory"]], "Step 2: Loading Data with DatasetsManager": [[5, "step-2-loading-data-with-datasetsmanager"]], "Step 2: Predicting Using the Trained Model": [[10, "step-2-predicting-using-the-trained-model"]], "Step 2: Verify the Installation": [[8, "step-2-verify-the-installation"]], "Step 3: Discovering Supported Models": [[10, "step-3-discovering-supported-models"]], "Step 3: Evaluating the Model": [[10, "step-3-evaluating-the-model"]], "Step 3: Loading Datasets": [[5, "step-3-loading-datasets"]], "Step 3: Performing Operations on MaskedDataset": [[5, "step-3-performing-operations-on-maskeddataset"]], "Step 3: Running the Detectron Experiment": [[6, "step-3-running-the-detectron-experiment"]], "Step 3: Running the med3pa Experiment": [[9, "step-3-running-the-med3pa-experiment"]], "Step 4: Analyzing and Saving the Results": [[9, "step-4-analyzing-and-saving-the-results"]], "Step 4: Analyzing the Results": [[6, "step-4-analyzing-the-results"]], "Step 4: Ensuring Feature Consistency": [[5, "step-4-ensuring-feature-consistency"]], "Step 4: Retrieving Model Information": [[10, "step-4-retrieving-model-information"]], "Step 4: Specifying and Creating a Model": [[10, "step-4-specifying-and-creating-a-model"]], "Step 5: Loading a Model from a Serialized State": [[10, "step-5-loading-a-model-from-a-serialized-state"]], "Step 5: Retrieving Data": [[5, "step-5-retrieving-data"]], "Step 5: Running experiments from pretrained models": [[9, "step-5-running-experiments-from-pretrained-models"]], "Step 5: Saving Model Information": [[10, "step-5-saving-model-information"]], "Step 5: Saving the Results": [[6, "step-5-saving-the-results"]], "Step 6: Comparing the Results": [[6, "step-6-comparing-the-results"]], "Step 6: Comparing two experiments": [[9, "step-6-comparing-two-experiments"]], "Step 6: Getting a Summary": [[5, "step-6-getting-a-summary"]], "Step 7: Saving and Resetting Datasets": [[5, "step-7-saving-and-resetting-datasets"]], "Subpackages": [[7, "subpackages"], [7, null]], "Summary of Outputs": [[5, "summary-of-outputs"]], "Tutorials": [[7, "tutorials"], [7, null], [11, null]], "Usage": [[8, "usage"]], "Use and Application of the package": [[7, "use-and-application-of-the-package"]], "Using the DatasetsManager class": [[5, "using-the-datasetsmanager-class"]], "Using the MaskedDataset Class": [[5, "using-the-maskeddataset-class"]], "Using the Model Class": [[10, "using-the-model-class"]], "Using the ModelFactory Class": [[10, "using-the-modelfactory-class"]], "Welcome to MED3pa documentation!": [[7, null]], "Working with datasets subpackage": [[5, null]], "Working with the Detectron Subpackage": [[6, null]], "Working with the Models Subpackage": [[10, null]], "Working with the med3pa Subpackage": [[9, null]], "abstract_metrics module": [[4, "module-MED3pa.models.abstract_metrics"]], "abstract_models module": [[4, "module-MED3pa.models.abstract_models"]], "base module": [[4, "module-MED3pa.models.base"]], "classification_metrics module": [[4, "module-MED3pa.models.classification_metrics"]], "comparaison module": [[2, "comparaison-module"]], "compraison module": [[3, "module-MED3pa.med3pa.comparaison"]], "concrete_classifiers module": [[4, "module-MED3pa.models.concrete_classifiers"]], "concrete_regressors module": [[4, "module-MED3pa.models.concrete_regressors"]], "data_strategies module": [[4, "module-MED3pa.models.data_strategies"]], "datasets subpackage": [[1, null]], "detectron subpackage": [[2, null]], "ensemble module": [[2, "module-MED3pa.detectron.ensemble"]], "experiment module": [[2, "experiment-module"], [3, "module-MED3pa.med3pa.experiment"]], "factories module": [[4, "module-MED3pa.models.factories"]], "loading_context module": [[1, "module-MED3pa.datasets.loading_context"]], "loading_strategies module": [[1, "module-MED3pa.datasets.loading_strategies"]], "manager module": [[1, "module-MED3pa.datasets.manager"]], "masked module": [[1, "module-MED3pa.datasets.masked"]], "med3pa subpackage": [[3, null]], "models module": [[3, "module-MED3pa.med3pa.models"]], "models subpackage": [[4, null]], "record module": [[2, "module-MED3pa.detectron.record"]], "regression_metrics module": [[4, "module-MED3pa.models.regression_metrics"]], "stopper module": [[2, "module-MED3pa.detectron.stopper"]], "strategies module": [[2, "strategies-module"]], "tree module": [[3, "module-MED3pa.med3pa.tree"]], "uncertainty module": [[3, "module-MED3pa.med3pa.uncertainty"]]}, "docnames": ["MED3pa", "MED3pa.datasets", "MED3pa.detectron", "MED3pa.med3pa", "MED3pa.models", "datasets_tutorials", "detectron_tutorials", "index", "installation", "med3pa_tutorials", "models_tutorials", "tutorials"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["MED3pa.rst", "MED3pa.datasets.rst", "MED3pa.detectron.rst", "MED3pa.med3pa.rst", "MED3pa.models.rst", "datasets_tutorials.rst", "detectron_tutorials.rst", "index.rst", "installation.rst", "med3pa_tutorials.rst", "models_tutorials.rst", "tutorials.rst"], "indexentries": {"absoluteerror (class in med3pa.med3pa.uncertainty)": [[3, "MED3pa.med3pa.uncertainty.AbsoluteError", false]], "accuracy() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.accuracy", false]], "apcmodel (class in med3pa.med3pa.models)": [[3, "MED3pa.med3pa.models.APCModel", false]], "average_precision() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.average_precision", false]], "balance_train_weights() (med3pa.models.abstract_models.classificationmodel method)": [[4, "MED3pa.models.abstract_models.ClassificationModel.balance_train_weights", false]], "balanced_accuracy() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.balanced_accuracy", false]], "basemodelmanager (class in med3pa.models.base)": [[4, "MED3pa.models.base.BaseModelManager", false]], "build_tree() (med3pa.med3pa.tree.treerepresentation method)": [[3, "MED3pa.med3pa.tree.TreeRepresentation.build_tree", false]], "calc_metrics_by_dr() (med3pa.med3pa.mdr.mdrcalculator static method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.calc_metrics_by_dr", false]], "calc_metrics_by_profiles() (med3pa.med3pa.mdr.mdrcalculator static method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.calc_metrics_by_profiles", false]], "calc_profiles() (med3pa.med3pa.mdr.mdrcalculator method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.calc_profiles", false]], "calc_profiles_deprecated() (med3pa.med3pa.mdr.mdrcalculator static method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.calc_profiles_deprecated", false]], "calculate() (med3pa.med3pa.uncertainty.absoluteerror method)": [[3, "MED3pa.med3pa.uncertainty.AbsoluteError.calculate", false]], "calculate() (med3pa.med3pa.uncertainty.uncertaintymetric method)": [[3, "MED3pa.med3pa.uncertainty.UncertaintyMetric.calculate", false]], "calculate_uncertainty() (med3pa.med3pa.uncertainty.uncertaintycalculator method)": [[3, "MED3pa.med3pa.uncertainty.UncertaintyCalculator.calculate_uncertainty", false]], "check_version() (med3pa.models.factories.xgboostfactory method)": [[4, "MED3pa.models.factories.XGBoostFactory.check_version", false]], "classificationevaluationmetrics (class in med3pa.models.classification_metrics)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics", false]], "classificationmodel (class in med3pa.models.abstract_models)": [[4, "MED3pa.models.abstract_models.ClassificationModel", false]], "clone() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.clone", false]], "clone_base_model() (med3pa.models.base.basemodelmanager class method)": [[4, "MED3pa.models.base.BaseModelManager.clone_base_model", false]], "combine() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.combine", false]], "combine() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.combine", false]], "compare_config() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.compare_config", false]], "compare_experiments() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.compare_experiments", false]], "compare_global_metrics() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.compare_global_metrics", false]], "compare_models_evaluation() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.compare_models_evaluation", false]], "compare_profiles_detectron_results() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.compare_profiles_detectron_results", false]], "compare_profiles_metrics() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.compare_profiles_metrics", false]], "count_quantile() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.count_quantile", false]], "counts() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.counts", false]], "create_model_from_pickled() (med3pa.models.factories.modelfactory static method)": [[4, "MED3pa.models.factories.ModelFactory.create_model_from_pickled", false]], "create_model_from_pickled() (med3pa.models.factories.xgboostfactory method)": [[4, "MED3pa.models.factories.XGBoostFactory.create_model_from_pickled", false]], "create_model_with_hyperparams() (med3pa.models.factories.modelfactory static method)": [[4, "MED3pa.models.factories.ModelFactory.create_model_with_hyperparams", false]], "create_model_with_hyperparams() (med3pa.models.factories.xgboostfactory method)": [[4, "MED3pa.models.factories.XGBoostFactory.create_model_with_hyperparams", false]], "csvdataloadingstrategy (class in med3pa.datasets.loading_strategies)": [[1, "MED3pa.datasets.loading_strategies.CSVDataLoadingStrategy", false]], "data_preparation_strategy (med3pa.models.abstract_models.model attribute)": [[4, "MED3pa.models.abstract_models.Model.data_preparation_strategy", false]], "dataloadingcontext (class in med3pa.datasets.loading_context)": [[1, "MED3pa.datasets.loading_context.DataLoadingContext", false]], "dataloadingstrategy (class in med3pa.datasets.loading_strategies)": [[1, "MED3pa.datasets.loading_strategies.DataLoadingStrategy", false]], "datapreparingstrategy (class in med3pa.models.data_strategies)": [[4, "MED3pa.models.data_strategies.DataPreparingStrategy", false]], "datasetsmanager (class in med3pa.datasets.manager)": [[1, "MED3pa.datasets.manager.DatasetsManager", false]], "decisiontreeregressormodel (class in med3pa.models.concrete_regressors)": [[4, "MED3pa.models.concrete_regressors.DecisionTreeRegressorModel", false]], "default_params (med3pa.med3pa.models.apcmodel attribute)": [[3, "MED3pa.med3pa.models.APCModel.default_params", false]], "default_params (med3pa.med3pa.models.ipcmodel attribute)": [[3, "MED3pa.med3pa.models.IPCModel.default_params", false]], "detectron_by_profiles() (med3pa.med3pa.mdr.mdrcalculator method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.detectron_by_profiles", false]], "detectron_by_profiles_deprecated() (med3pa.med3pa.mdr.mdrcalculator static method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.detectron_by_profiles_deprecated", false]], "detectronensemble (class in med3pa.detectron.ensemble)": [[2, "MED3pa.detectron.ensemble.DetectronEnsemble", false]], "detectronrecord (class in med3pa.detectron.record)": [[2, "MED3pa.detectron.record.DetectronRecord", false]], "detectronrecordsmanager (class in med3pa.detectron.record)": [[2, "MED3pa.detectron.record.DetectronRecordsManager", false]], "earlystopper (class in med3pa.detectron.stopper)": [[2, "MED3pa.detectron.stopper.EarlyStopper", false]], "evaluate() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.evaluate", false]], "evaluate() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.evaluate", false]], "evaluate() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.evaluate", false]], "evaluate() (med3pa.models.concrete_classifiers.xgboostmodel method)": [[4, "MED3pa.models.concrete_classifiers.XGBoostModel.evaluate", false]], "evaluate() (med3pa.models.concrete_regressors.decisiontreeregressormodel method)": [[4, "MED3pa.models.concrete_regressors.DecisionTreeRegressorModel.evaluate", false]], "evaluate() (med3pa.models.concrete_regressors.randomforestregressormodel method)": [[4, "MED3pa.models.concrete_regressors.RandomForestRegressorModel.evaluate", false]], "evaluate_ensemble() (med3pa.detectron.ensemble.detectronensemble method)": [[2, "MED3pa.detectron.ensemble.DetectronEnsemble.evaluate_ensemble", false]], "evaluationmetric (class in med3pa.models.abstract_metrics)": [[4, "MED3pa.models.abstract_metrics.EvaluationMetric", false]], "execute() (med3pa.datasets.loading_strategies.csvdataloadingstrategy static method)": [[1, "MED3pa.datasets.loading_strategies.CSVDataLoadingStrategy.execute", false]], "execute() (med3pa.datasets.loading_strategies.dataloadingstrategy method)": [[1, "MED3pa.datasets.loading_strategies.DataLoadingStrategy.execute", false]], "execute() (med3pa.models.data_strategies.datapreparingstrategy static method)": [[4, "MED3pa.models.data_strategies.DataPreparingStrategy.execute", false]], "execute() (med3pa.models.data_strategies.todataframesstrategy static method)": [[4, "MED3pa.models.data_strategies.ToDataframesStrategy.execute", false]], "execute() (med3pa.models.data_strategies.todmatrixstrategy static method)": [[4, "MED3pa.models.data_strategies.ToDmatrixStrategy.execute", false]], "execute() (med3pa.models.data_strategies.tonumpystrategy static method)": [[4, "MED3pa.models.data_strategies.ToNumpyStrategy.execute", false]], "extract_params() (med3pa.models.factories.xgboostfactory method)": [[4, "MED3pa.models.factories.XGBoostFactory.extract_params", false]], "f1_score() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.f1_score", false]], "factories (med3pa.models.factories.modelfactory attribute)": [[4, "MED3pa.models.factories.ModelFactory.factories", false]], "freeze() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.freeze", false]], "get_all_nodes() (med3pa.med3pa.tree.treerepresentation method)": [[3, "MED3pa.med3pa.tree.TreeRepresentation.get_all_nodes", false]], "get_all_profiles() (med3pa.med3pa.tree.treerepresentation method)": [[3, "MED3pa.med3pa.tree.TreeRepresentation.get_all_profiles", false]], "get_column_labels() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.get_column_labels", false]], "get_confidence_scores() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_confidence_scores", false]], "get_confidence_scores() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.get_confidence_scores", false]], "get_data_strategy() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.get_data_strategy", false]], "get_dataset_by_type() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.get_dataset_by_type", false]], "get_evaluation() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.get_evaluation", false]], "get_factory() (med3pa.models.factories.modelfactory static method)": [[4, "MED3pa.models.factories.ModelFactory.get_factory", false]], "get_file_path() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_file_path", false]], "get_info() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.get_info", false]], "get_info() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_info", false]], "get_info() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.get_info", false]], "get_info() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.get_info", false]], "get_info() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.get_info", false]], "get_instance() (med3pa.models.base.basemodelmanager class method)": [[4, "MED3pa.models.base.BaseModelManager.get_instance", false]], "get_lost_profiles() (med3pa.med3pa.profiles.profilesmanager method)": [[3, "MED3pa.med3pa.profiles.ProfilesManager.get_lost_profiles", false]], "get_metric() (med3pa.models.abstract_metrics.evaluationmetric class method)": [[4, "MED3pa.models.abstract_metrics.EvaluationMetric.get_metric", false]], "get_metric() (med3pa.models.classification_metrics.classificationevaluationmetrics class method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.get_metric", false]], "get_metric() (med3pa.models.regression_metrics.regressionevaluationmetrics class method)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics.get_metric", false]], "get_model() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.get_model", false]], "get_model_type() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.get_model_type", false]], "get_observations() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_observations", false]], "get_params() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.get_params", false]], "get_path() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.get_path", false]], "get_profiles() (med3pa.med3pa.profiles.profilesmanager method)": [[3, "MED3pa.med3pa.profiles.ProfilesManager.get_profiles", false]], "get_profiles_manager() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.get_profiles_manager", false]], "get_pseudo_labels() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_pseudo_labels", false]], "get_pseudo_probabilities() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_pseudo_probabilities", false]], "get_record() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.get_record", false]], "get_sample_counts() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_sample_counts", false]], "get_strategy() (med3pa.datasets.loading_context.dataloadingcontext method)": [[1, "MED3pa.datasets.loading_context.DataLoadingContext.get_strategy", false]], "get_supported_models() (med3pa.models.factories.modelfactory static method)": [[4, "MED3pa.models.factories.ModelFactory.get_supported_models", false]], "get_true_labels() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.get_true_labels", false]], "identify_shared_profiles() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.identify_shared_profiles", false]], "insert_lost_profiles() (med3pa.med3pa.profiles.profilesmanager method)": [[3, "MED3pa.med3pa.profiles.ProfilesManager.insert_lost_profiles", false]], "insert_profiles() (med3pa.med3pa.profiles.profilesmanager method)": [[3, "MED3pa.med3pa.profiles.ProfilesManager.insert_profiles", false]], "ipcmodel (class in med3pa.med3pa.models)": [[3, "MED3pa.med3pa.models.IPCModel", false]], "is_comparable() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.is_comparable", false]], "is_pickled() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.is_pickled", false]], "is_supported_data() (med3pa.models.data_strategies.todmatrixstrategy static method)": [[4, "MED3pa.models.data_strategies.ToDmatrixStrategy.is_supported_data", false]], "load() (med3pa.detectron.record.detectronrecordsmanager static method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.load", false]], "load_as_np() (med3pa.datasets.loading_context.dataloadingcontext method)": [[1, "MED3pa.datasets.loading_context.DataLoadingContext.load_as_np", false]], "load_model() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.load_model", false]], "load_model() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.load_model", false]], "load_tree() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.load_tree", false]], "log_loss() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.log_loss", false]], "maskeddataset (class in med3pa.datasets.masked)": [[1, "MED3pa.datasets.masked.MaskedDataset", false]], "matthews_corrcoef() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.matthews_corrcoef", false]], "mdrcalculator (class in med3pa.med3pa.mdr)": [[3, "MED3pa.med3pa.mdr.MDRCalculator", false]], "mean_absolute_error() (med3pa.models.regression_metrics.regressionevaluationmetrics static method)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics.mean_absolute_error", false]], "mean_squared_error() (med3pa.models.regression_metrics.regressionevaluationmetrics static method)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics.mean_squared_error", false]], "med3pa.datasets.loading_context": [[1, "module-MED3pa.datasets.loading_context", false]], "med3pa.datasets.loading_strategies": [[1, "module-MED3pa.datasets.loading_strategies", false]], "med3pa.datasets.manager": [[1, "module-MED3pa.datasets.manager", false]], "med3pa.datasets.masked": [[1, "module-MED3pa.datasets.masked", false]], "med3pa.detectron.ensemble": [[2, "module-MED3pa.detectron.ensemble", false]], "med3pa.detectron.record": [[2, "module-MED3pa.detectron.record", false]], "med3pa.detectron.stopper": [[2, "module-MED3pa.detectron.stopper", false]], "med3pa.med3pa.comparaison": [[3, "module-MED3pa.med3pa.comparaison", false]], "med3pa.med3pa.experiment": [[3, "module-MED3pa.med3pa.experiment", false]], "med3pa.med3pa.mdr": [[3, "module-MED3pa.med3pa.mdr", false]], "med3pa.med3pa.models": [[3, "module-MED3pa.med3pa.models", false]], "med3pa.med3pa.profiles": [[3, "module-MED3pa.med3pa.profiles", false]], "med3pa.med3pa.tree": [[3, "module-MED3pa.med3pa.tree", false]], "med3pa.med3pa.uncertainty": [[3, "module-MED3pa.med3pa.uncertainty", false]], "med3pa.models.abstract_metrics": [[4, "module-MED3pa.models.abstract_metrics", false]], "med3pa.models.abstract_models": [[4, "module-MED3pa.models.abstract_models", false]], "med3pa.models.base": [[4, "module-MED3pa.models.base", false]], "med3pa.models.classification_metrics": [[4, "module-MED3pa.models.classification_metrics", false]], "med3pa.models.concrete_classifiers": [[4, "module-MED3pa.models.concrete_classifiers", false]], "med3pa.models.concrete_regressors": [[4, "module-MED3pa.models.concrete_regressors", false]], "med3pa.models.data_strategies": [[4, "module-MED3pa.models.data_strategies", false]], "med3pa.models.factories": [[4, "module-MED3pa.models.factories", false]], "med3pa.models.regression_metrics": [[4, "module-MED3pa.models.regression_metrics", false]], "med3pacomparison (class in med3pa.med3pa.comparaison)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison", false]], "med3padetectronexperiment (class in med3pa.med3pa.experiment)": [[3, "MED3pa.med3pa.experiment.Med3paDetectronExperiment", false]], "med3paexperiment (class in med3pa.med3pa.experiment)": [[3, "MED3pa.med3pa.experiment.Med3paExperiment", false]], "med3parecord (class in med3pa.med3pa.experiment)": [[3, "MED3pa.med3pa.experiment.Med3paRecord", false]], "med3paresults (class in med3pa.med3pa.experiment)": [[3, "MED3pa.med3pa.experiment.Med3paResults", false]], "metric_mapping (med3pa.med3pa.uncertainty.uncertaintycalculator attribute)": [[3, "MED3pa.med3pa.uncertainty.UncertaintyCalculator.metric_mapping", false]], "model (class in med3pa.models.abstract_models)": [[4, "MED3pa.models.abstract_models.Model", false]], "model (med3pa.models.abstract_models.model attribute)": [[4, "MED3pa.models.abstract_models.Model.model", false]], "model_class (med3pa.models.abstract_models.model attribute)": [[4, "MED3pa.models.abstract_models.Model.model_class", false]], "model_mapping (med3pa.models.factories.modelfactory attribute)": [[4, "MED3pa.models.factories.ModelFactory.model_mapping", false]], "modelfactory (class in med3pa.models.factories)": [[4, "MED3pa.models.factories.ModelFactory", false]], "module": [[1, "module-MED3pa.datasets.loading_context", false], [1, "module-MED3pa.datasets.loading_strategies", false], [1, "module-MED3pa.datasets.manager", false], [1, "module-MED3pa.datasets.masked", false], [2, "module-MED3pa.detectron.ensemble", false], [2, "module-MED3pa.detectron.record", false], [2, "module-MED3pa.detectron.stopper", false], [3, "module-MED3pa.med3pa.comparaison", false], [3, "module-MED3pa.med3pa.experiment", false], [3, "module-MED3pa.med3pa.mdr", false], [3, "module-MED3pa.med3pa.models", false], [3, "module-MED3pa.med3pa.profiles", false], [3, "module-MED3pa.med3pa.tree", false], [3, "module-MED3pa.med3pa.uncertainty", false], [4, "module-MED3pa.models.abstract_metrics", false], [4, "module-MED3pa.models.abstract_models", false], [4, "module-MED3pa.models.base", false], [4, "module-MED3pa.models.classification_metrics", false], [4, "module-MED3pa.models.concrete_classifiers", false], [4, "module-MED3pa.models.concrete_regressors", false], [4, "module-MED3pa.models.data_strategies", false], [4, "module-MED3pa.models.factories", false], [4, "module-MED3pa.models.regression_metrics", false]], "mpcmodel (class in med3pa.med3pa.models)": [[3, "MED3pa.med3pa.models.MPCModel", false]], "npv() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.npv", false]], "optimize() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.optimize", false]], "optimize() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.optimize", false]], "os (med3pa.med3pa.experiment.med3paresults attribute)": [[3, "MED3pa.med3pa.experiment.Med3paResults.os", false]], "params (med3pa.models.abstract_models.model attribute)": [[4, "MED3pa.models.abstract_models.Model.params", false]], "pickled_model (med3pa.models.abstract_models.model attribute)": [[4, "MED3pa.models.abstract_models.Model.pickled_model", false]], "ppv() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.ppv", false]], "precision() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.precision", false]], "predict() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.predict", false]], "predict() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.predict", false]], "predict() (med3pa.med3pa.models.mpcmodel method)": [[3, "MED3pa.med3pa.models.MPCModel.predict", false]], "predict() (med3pa.models.abstract_models.classificationmodel method)": [[4, "MED3pa.models.abstract_models.ClassificationModel.predict", false]], "predict() (med3pa.models.abstract_models.regressionmodel method)": [[4, "MED3pa.models.abstract_models.RegressionModel.predict", false]], "predict() (med3pa.models.concrete_classifiers.xgboostmodel method)": [[4, "MED3pa.models.concrete_classifiers.XGBoostModel.predict", false]], "predict() (med3pa.models.concrete_regressors.decisiontreeregressormodel method)": [[4, "MED3pa.models.concrete_regressors.DecisionTreeRegressorModel.predict", false]], "predict() (med3pa.models.concrete_regressors.randomforestregressormodel method)": [[4, "MED3pa.models.concrete_regressors.RandomForestRegressorModel.predict", false]], "predicted_probabilities() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.predicted_probabilities", false]], "print_decision_tree_structure() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.print_decision_tree_structure", false]], "print_evaluation_results() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.print_evaluation_results", false]], "profile (class in med3pa.med3pa.profiles)": [[3, "MED3pa.med3pa.profiles.Profile", false]], "profilesmanager (class in med3pa.med3pa.profiles)": [[3, "MED3pa.med3pa.profiles.ProfilesManager", false]], "r2_score() (med3pa.models.regression_metrics.regressionevaluationmetrics static method)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics.r2_score", false]], "randomforestregressormodel (class in med3pa.models.concrete_regressors)": [[4, "MED3pa.models.concrete_regressors.RandomForestRegressorModel", false]], "recall() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.recall", false]], "refine() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.refine", false]], "regressionevaluationmetrics (class in med3pa.models.regression_metrics)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics", false]], "regressionmodel (class in med3pa.models.abstract_models)": [[4, "MED3pa.models.abstract_models.RegressionModel", false]], "rejected_count_quantile() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.rejected_count_quantile", false]], "rejected_counts() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.rejected_counts", false]], "rejection_rates() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.rejection_rates", false]], "reset() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.reset", false]], "reset() (med3pa.models.base.basemodelmanager class method)": [[4, "MED3pa.models.base.BaseModelManager.reset", false]], "reset_datasets() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.reset_datasets", false]], "reset_indices() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.reset_indices", false]], "roc_auc() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.roc_auc", false]], "root_mean_squared_error() (med3pa.models.regression_metrics.regressionevaluationmetrics static method)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics.root_mean_squared_error", false]], "run() (med3pa.med3pa.experiment.med3padetectronexperiment static method)": [[3, "MED3pa.med3pa.experiment.Med3paDetectronExperiment.run", false]], "run() (med3pa.med3pa.experiment.med3paexperiment static method)": [[3, "MED3pa.med3pa.experiment.Med3paExperiment.run", false]], "sample_random() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.sample_random", false]], "sample_uniform() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.sample_uniform", false]], "save() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.save", false]], "save() (med3pa.med3pa.comparaison.med3pacomparison method)": [[3, "MED3pa.med3pa.comparaison.Med3paComparison.save", false]], "save() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.save", false]], "save() (med3pa.med3pa.experiment.med3paresults method)": [[3, "MED3pa.med3pa.experiment.Med3paResults.save", false]], "save() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.save", false]], "save_dataset_to_csv() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.save_dataset_to_csv", false]], "save_model() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.save_model", false]], "save_model() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.save_model", false]], "save_models() (med3pa.med3pa.experiment.med3paresults method)": [[3, "MED3pa.med3pa.experiment.Med3paResults.save_models", false]], "save_to_csv() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.save_to_csv", false]], "save_tree() (med3pa.med3pa.tree.treerepresentation method)": [[3, "MED3pa.med3pa.tree.TreeRepresentation.save_tree", false]], "seed() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.seed", false]], "sensitivity() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.sensitivity", false]], "set_base_model() (med3pa.models.base.basemodelmanager class method)": [[4, "MED3pa.models.base.BaseModelManager.set_base_model", false]], "set_column_labels() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.set_column_labels", false]], "set_confidence_scores() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.set_confidence_scores", false]], "set_confidence_scores() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.set_confidence_scores", false]], "set_data_strategy() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.set_data_strategy", false]], "set_dataset() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.set_dataset", false]], "set_detectron_results() (med3pa.med3pa.experiment.med3paresults method)": [[3, "MED3pa.med3pa.experiment.Med3paResults.set_detectron_results", false]], "set_evaluation() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.set_evaluation", false]], "set_experiment_config() (med3pa.med3pa.experiment.med3paresults method)": [[3, "MED3pa.med3pa.experiment.Med3paResults.set_experiment_config", false]], "set_file_path() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.set_file_path", false]], "set_file_path() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.set_file_path", false]], "set_from_data() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.set_from_data", false]], "set_from_file() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.set_from_file", false]], "set_metrics_by_dr() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.set_metrics_by_dr", false]], "set_model() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.set_model", false]], "set_models() (med3pa.med3pa.experiment.med3paresults method)": [[3, "MED3pa.med3pa.experiment.Med3paResults.set_models", false]], "set_models_evaluation() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.set_models_evaluation", false]], "set_params() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.set_params", false]], "set_profiles_manager() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.set_profiles_manager", false]], "set_pseudo_labels() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.set_pseudo_labels", false]], "set_pseudo_probs_labels() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.set_pseudo_probs_labels", false]], "set_strategy() (med3pa.datasets.loading_context.dataloadingcontext method)": [[1, "MED3pa.datasets.loading_context.DataLoadingContext.set_strategy", false]], "set_tree() (med3pa.med3pa.experiment.med3parecord method)": [[3, "MED3pa.med3pa.experiment.Med3paRecord.set_tree", false]], "specificity() (med3pa.models.classification_metrics.classificationevaluationmetrics static method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.specificity", false]], "strategies (med3pa.datasets.loading_context.dataloadingcontext attribute)": [[1, "MED3pa.datasets.loading_context.DataLoadingContext.strategies", false]], "summarize() (med3pa.datasets.manager.datasetsmanager method)": [[1, "MED3pa.datasets.manager.DatasetsManager.summarize", false]], "summarize() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.summarize", false]], "supported_file_formats() (in module med3pa.datasets.loading_context)": [[1, "MED3pa.datasets.loading_context.supported_file_formats", false]], "supported_ipc_models() (med3pa.med3pa.models.ipcmodel class method)": [[3, "MED3pa.med3pa.models.IPCModel.supported_ipc_models", false]], "supported_metrics() (med3pa.med3pa.uncertainty.uncertaintycalculator class method)": [[3, "MED3pa.med3pa.uncertainty.UncertaintyCalculator.supported_metrics", false]], "supported_metrics() (med3pa.models.abstract_metrics.evaluationmetric class method)": [[4, "MED3pa.models.abstract_metrics.EvaluationMetric.supported_metrics", false]], "supported_metrics() (med3pa.models.classification_metrics.classificationevaluationmetrics class method)": [[4, "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics.supported_metrics", false]], "supported_metrics() (med3pa.models.regression_metrics.regressionevaluationmetrics class method)": [[4, "MED3pa.models.regression_metrics.RegressionEvaluationMetrics.supported_metrics", false]], "supported_models_params() (med3pa.med3pa.models.apcmodel class method)": [[3, "MED3pa.med3pa.models.APCModel.supported_models_params", false]], "supported_models_params() (med3pa.med3pa.models.ipcmodel class method)": [[3, "MED3pa.med3pa.models.IPCModel.supported_models_params", false]], "supported_params (med3pa.med3pa.models.apcmodel attribute)": [[3, "MED3pa.med3pa.models.APCModel.supported_params", false]], "supported_regressors_mapping (med3pa.med3pa.models.ipcmodel attribute)": [[3, "MED3pa.med3pa.models.IPCModel.supported_regressors_mapping", false]], "supported_regressos_params (med3pa.med3pa.models.ipcmodel attribute)": [[3, "MED3pa.med3pa.models.IPCModel.supported_regressos_params", false]], "to_dataframe() (med3pa.datasets.masked.maskeddataset method)": [[1, "MED3pa.datasets.masked.MaskedDataset.to_dataframe", false]], "to_dict() (med3pa.detectron.record.detectronrecord method)": [[2, "MED3pa.detectron.record.DetectronRecord.to_dict", false]], "to_dict() (med3pa.med3pa.profiles.profile method)": [[3, "MED3pa.med3pa.profiles.Profile.to_dict", false]], "to_serializable() (in module med3pa.med3pa.experiment)": [[3, "MED3pa.med3pa.experiment.to_serializable", false]], "to_serializable() (in module med3pa.med3pa.tree)": [[3, "MED3pa.med3pa.tree.to_serializable", false]], "todataframesstrategy (class in med3pa.models.data_strategies)": [[4, "MED3pa.models.data_strategies.ToDataframesStrategy", false]], "todmatrixstrategy (class in med3pa.models.data_strategies)": [[4, "MED3pa.models.data_strategies.ToDmatrixStrategy", false]], "tonumpystrategy (class in med3pa.models.data_strategies)": [[4, "MED3pa.models.data_strategies.ToNumpyStrategy", false]], "train() (med3pa.med3pa.models.apcmodel method)": [[3, "MED3pa.med3pa.models.APCModel.train", false]], "train() (med3pa.med3pa.models.ipcmodel method)": [[3, "MED3pa.med3pa.models.IPCModel.train", false]], "train() (med3pa.models.abstract_models.classificationmodel method)": [[4, "MED3pa.models.abstract_models.ClassificationModel.train", false]], "train() (med3pa.models.abstract_models.regressionmodel method)": [[4, "MED3pa.models.abstract_models.RegressionModel.train", false]], "train() (med3pa.models.concrete_classifiers.xgboostmodel method)": [[4, "MED3pa.models.concrete_classifiers.XGBoostModel.train", false]], "train() (med3pa.models.concrete_regressors.decisiontreeregressormodel method)": [[4, "MED3pa.models.concrete_regressors.DecisionTreeRegressorModel.train", false]], "train() (med3pa.models.concrete_regressors.randomforestregressormodel method)": [[4, "MED3pa.models.concrete_regressors.RandomForestRegressorModel.train", false]], "train_to_disagree() (med3pa.models.concrete_classifiers.xgboostmodel method)": [[4, "MED3pa.models.concrete_classifiers.XGBoostModel.train_to_disagree", false]], "transform_to_profiles() (med3pa.med3pa.profiles.profilesmanager static method)": [[3, "MED3pa.med3pa.profiles.ProfilesManager.transform_to_profiles", false]], "treerepresentation (class in med3pa.med3pa.tree)": [[3, "MED3pa.med3pa.tree.TreeRepresentation", false]], "uncertaintycalculator (class in med3pa.med3pa.uncertainty)": [[3, "MED3pa.med3pa.uncertainty.UncertaintyCalculator", false]], "uncertaintymetric (class in med3pa.med3pa.uncertainty)": [[3, "MED3pa.med3pa.uncertainty.UncertaintyMetric", false]], "underlying_models_mapping (med3pa.med3pa.models.ipcmodel attribute)": [[3, "MED3pa.med3pa.models.IPCModel.underlying_models_mapping", false]], "update() (med3pa.detectron.record.detectronrecord method)": [[2, "MED3pa.detectron.record.DetectronRecord.update", false]], "update() (med3pa.detectron.record.detectronrecordsmanager method)": [[2, "MED3pa.detectron.record.DetectronRecordsManager.update", false]], "update() (med3pa.detectron.stopper.earlystopper method)": [[2, "MED3pa.detectron.stopper.EarlyStopper.update", false]], "update_detectron_results() (med3pa.med3pa.profiles.profile method)": [[3, "MED3pa.med3pa.profiles.Profile.update_detectron_results", false]], "update_metrics_results() (med3pa.med3pa.profiles.profile method)": [[3, "MED3pa.med3pa.profiles.Profile.update_metrics_results", false]], "update_min_confidence() (med3pa.med3pa.mdr.mdrcalculator static method)": [[3, "MED3pa.med3pa.mdr.MDRCalculator.update_min_confidence", false]], "update_node_information() (med3pa.med3pa.profiles.profile method)": [[3, "MED3pa.med3pa.profiles.Profile.update_node_information", false]], "update_params() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.update_params", false]], "validate_params() (med3pa.models.abstract_models.model method)": [[4, "MED3pa.models.abstract_models.Model.validate_params", false]], "xgboostfactory (class in med3pa.models.factories)": [[4, "MED3pa.models.factories.XGBoostFactory", false]], "xgboostmodel (class in med3pa.models.concrete_classifiers)": [[4, "MED3pa.models.concrete_classifiers.XGBoostModel", false]]}, "objects": {"MED3pa.datasets": [[1, 0, 0, "-", "loading_context"], [1, 0, 0, "-", "loading_strategies"], [1, 0, 0, "-", "manager"], [1, 0, 0, "-", "masked"]], "MED3pa.datasets.loading_context": [[1, 1, 1, "", "DataLoadingContext"], [1, 4, 1, "", "supported_file_formats"]], "MED3pa.datasets.loading_context.DataLoadingContext": [[1, 2, 1, "", "get_strategy"], [1, 2, 1, "", "load_as_np"], [1, 2, 1, "", "set_strategy"], [1, 3, 1, "", "strategies"]], "MED3pa.datasets.loading_strategies": [[1, 1, 1, "", "CSVDataLoadingStrategy"], [1, 1, 1, "", "DataLoadingStrategy"]], "MED3pa.datasets.loading_strategies.CSVDataLoadingStrategy": [[1, 2, 1, "", "execute"]], "MED3pa.datasets.loading_strategies.DataLoadingStrategy": [[1, 2, 1, "", "execute"]], "MED3pa.datasets.manager": [[1, 1, 1, "", "DatasetsManager"]], "MED3pa.datasets.manager.DatasetsManager": [[1, 2, 1, "", "combine"], [1, 2, 1, "", "get_column_labels"], [1, 2, 1, "", "get_dataset_by_type"], [1, 2, 1, "", "get_info"], [1, 2, 1, "", "reset"], [1, 2, 1, "", "reset_datasets"], [1, 2, 1, "", "save_dataset_to_csv"], [1, 2, 1, "", "set_column_labels"], [1, 2, 1, "", "set_from_data"], [1, 2, 1, "", "set_from_file"], [1, 2, 1, "", "summarize"]], "MED3pa.datasets.masked": [[1, 1, 1, "", "MaskedDataset"]], "MED3pa.datasets.masked.MaskedDataset": [[1, 2, 1, "", "clone"], [1, 2, 1, "", "combine"], [1, 2, 1, "", "get_confidence_scores"], [1, 2, 1, "", "get_file_path"], [1, 2, 1, "", "get_info"], [1, 2, 1, "", "get_observations"], [1, 2, 1, "", "get_pseudo_labels"], [1, 2, 1, "", "get_pseudo_probabilities"], [1, 2, 1, "", "get_sample_counts"], [1, 2, 1, "", "get_true_labels"], [1, 2, 1, "", "refine"], [1, 2, 1, "", "reset_indices"], [1, 2, 1, "", "sample_random"], [1, 2, 1, "", "sample_uniform"], [1, 2, 1, "", "save_to_csv"], [1, 2, 1, "", "set_confidence_scores"], [1, 2, 1, "", "set_file_path"], [1, 2, 1, "", "set_pseudo_labels"], [1, 2, 1, "", "set_pseudo_probs_labels"], [1, 2, 1, "", "summarize"], [1, 2, 1, "", "to_dataframe"]], "MED3pa.detectron": [[2, 0, 0, "-", "ensemble"], [2, 0, 0, "-", "record"], [2, 0, 0, "-", "stopper"]], "MED3pa.detectron.ensemble": [[2, 1, 1, "", "DetectronEnsemble"]], "MED3pa.detectron.ensemble.DetectronEnsemble": [[2, 2, 1, "", "evaluate_ensemble"]], "MED3pa.detectron.record": [[2, 1, 1, "", "DetectronRecord"], [2, 1, 1, "", "DetectronRecordsManager"]], "MED3pa.detectron.record.DetectronRecord": [[2, 2, 1, "", "to_dict"], [2, 2, 1, "", "update"]], "MED3pa.detectron.record.DetectronRecordsManager": [[2, 2, 1, "", "count_quantile"], [2, 2, 1, "", "counts"], [2, 2, 1, "", "freeze"], [2, 2, 1, "", "get_evaluation"], [2, 2, 1, "", "get_record"], [2, 2, 1, "", "load"], [2, 2, 1, "", "predicted_probabilities"], [2, 2, 1, "", "rejected_count_quantile"], [2, 2, 1, "", "rejected_counts"], [2, 2, 1, "", "rejection_rates"], [2, 2, 1, "", "save"], [2, 2, 1, "", "seed"], [2, 2, 1, "", "set_evaluation"], [2, 2, 1, "", "update"]], "MED3pa.detectron.stopper": [[2, 1, 1, "", "EarlyStopper"]], "MED3pa.detectron.stopper.EarlyStopper": [[2, 2, 1, "", "update"]], "MED3pa.med3pa": [[3, 0, 0, "-", "comparaison"], [3, 0, 0, "-", "experiment"], [3, 0, 0, "-", "mdr"], [3, 0, 0, "-", "models"], [3, 0, 0, "-", "profiles"], [3, 0, 0, "-", "tree"], [3, 0, 0, "-", "uncertainty"]], "MED3pa.med3pa.comparaison": [[3, 1, 1, "", "Med3paComparison"]], "MED3pa.med3pa.comparaison.Med3paComparison": [[3, 2, 1, "", "compare_config"], [3, 2, 1, "", "compare_experiments"], [3, 2, 1, "", "compare_global_metrics"], [3, 2, 1, "", "compare_models_evaluation"], [3, 2, 1, "", "compare_profiles_detectron_results"], [3, 2, 1, "", "compare_profiles_metrics"], [3, 2, 1, "", "identify_shared_profiles"], [3, 2, 1, "", "is_comparable"], [3, 2, 1, "", "save"]], "MED3pa.med3pa.experiment": [[3, 1, 1, "", "Med3paDetectronExperiment"], [3, 1, 1, "", "Med3paExperiment"], [3, 1, 1, "", "Med3paRecord"], [3, 1, 1, "", "Med3paResults"], [3, 4, 1, "", "to_serializable"]], "MED3pa.med3pa.experiment.Med3paDetectronExperiment": [[3, 2, 1, "", "run"]], "MED3pa.med3pa.experiment.Med3paExperiment": [[3, 2, 1, "", "run"]], "MED3pa.med3pa.experiment.Med3paRecord": [[3, 2, 1, "", "get_confidence_scores"], [3, 2, 1, "", "get_profiles_manager"], [3, 2, 1, "", "save"], [3, 2, 1, "", "set_confidence_scores"], [3, 2, 1, "", "set_dataset"], [3, 2, 1, "", "set_metrics_by_dr"], [3, 2, 1, "", "set_models_evaluation"], [3, 2, 1, "", "set_profiles_manager"], [3, 2, 1, "", "set_tree"]], "MED3pa.med3pa.experiment.Med3paResults": [[3, 3, 1, "", "os"], [3, 2, 1, "", "save"], [3, 2, 1, "", "save_models"], [3, 2, 1, "", "set_detectron_results"], [3, 2, 1, "", "set_experiment_config"], [3, 2, 1, "", "set_models"]], "MED3pa.med3pa.mdr": [[3, 1, 1, "", "MDRCalculator"]], "MED3pa.med3pa.mdr.MDRCalculator": [[3, 2, 1, "", "calc_metrics_by_dr"], [3, 2, 1, "", "calc_metrics_by_profiles"], [3, 2, 1, "", "calc_profiles"], [3, 2, 1, "", "calc_profiles_deprecated"], [3, 2, 1, "", "detectron_by_profiles"], [3, 2, 1, "", "detectron_by_profiles_deprecated"], [3, 2, 1, "", "update_min_confidence"]], "MED3pa.med3pa.models": [[3, 1, 1, "", "APCModel"], [3, 1, 1, "", "IPCModel"], [3, 1, 1, "", "MPCModel"]], "MED3pa.med3pa.models.APCModel": [[3, 3, 1, "", "default_params"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "get_info"], [3, 2, 1, "", "load_model"], [3, 2, 1, "", "load_tree"], [3, 2, 1, "", "optimize"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "print_decision_tree_structure"], [3, 2, 1, "", "save_model"], [3, 2, 1, "", "supported_models_params"], [3, 3, 1, "", "supported_params"], [3, 2, 1, "", "train"]], "MED3pa.med3pa.models.IPCModel": [[3, 3, 1, "", "default_params"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "get_info"], [3, 2, 1, "", "load_model"], [3, 2, 1, "", "optimize"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "save_model"], [3, 2, 1, "", "supported_ipc_models"], [3, 2, 1, "", "supported_models_params"], [3, 3, 1, "", "supported_regressors_mapping"], [3, 3, 1, "", "supported_regressos_params"], [3, 2, 1, "", "train"], [3, 3, 1, "", "underlying_models_mapping"]], "MED3pa.med3pa.models.MPCModel": [[3, 2, 1, "", "predict"]], "MED3pa.med3pa.profiles": [[3, 1, 1, "", "Profile"], [3, 1, 1, "", "ProfilesManager"]], "MED3pa.med3pa.profiles.Profile": [[3, 2, 1, "", "to_dict"], [3, 2, 1, "", "update_detectron_results"], [3, 2, 1, "", "update_metrics_results"], [3, 2, 1, "", "update_node_information"]], "MED3pa.med3pa.profiles.ProfilesManager": [[3, 2, 1, "", "get_lost_profiles"], [3, 2, 1, "", "get_profiles"], [3, 2, 1, "", "insert_lost_profiles"], [3, 2, 1, "", "insert_profiles"], [3, 2, 1, "", "transform_to_profiles"]], "MED3pa.med3pa.tree": [[3, 1, 1, "", "TreeRepresentation"], [3, 4, 1, "", "to_serializable"]], "MED3pa.med3pa.tree.TreeRepresentation": [[3, 2, 1, "", "build_tree"], [3, 2, 1, "", "get_all_nodes"], [3, 2, 1, "", "get_all_profiles"], [3, 2, 1, "", "save_tree"]], "MED3pa.med3pa.uncertainty": [[3, 1, 1, "", "AbsoluteError"], [3, 1, 1, "", "UncertaintyCalculator"], [3, 1, 1, "", "UncertaintyMetric"]], "MED3pa.med3pa.uncertainty.AbsoluteError": [[3, 2, 1, "", "calculate"]], "MED3pa.med3pa.uncertainty.UncertaintyCalculator": [[3, 2, 1, "", "calculate_uncertainty"], [3, 3, 1, "", "metric_mapping"], [3, 2, 1, "", "supported_metrics"]], "MED3pa.med3pa.uncertainty.UncertaintyMetric": [[3, 2, 1, "", "calculate"]], "MED3pa.models": [[4, 0, 0, "-", "abstract_metrics"], [4, 0, 0, "-", "abstract_models"], [4, 0, 0, "-", "base"], [4, 0, 0, "-", "classification_metrics"], [4, 0, 0, "-", "concrete_classifiers"], [4, 0, 0, "-", "concrete_regressors"], [4, 0, 0, "-", "data_strategies"], [4, 0, 0, "-", "factories"], [4, 0, 0, "-", "regression_metrics"]], "MED3pa.models.abstract_metrics": [[4, 1, 1, "", "EvaluationMetric"]], "MED3pa.models.abstract_metrics.EvaluationMetric": [[4, 2, 1, "", "get_metric"], [4, 2, 1, "", "supported_metrics"]], "MED3pa.models.abstract_models": [[4, 1, 1, "", "ClassificationModel"], [4, 1, 1, "", "Model"], [4, 1, 1, "", "RegressionModel"]], "MED3pa.models.abstract_models.ClassificationModel": [[4, 2, 1, "", "balance_train_weights"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "train"]], "MED3pa.models.abstract_models.Model": [[4, 3, 1, "", "data_preparation_strategy"], [4, 2, 1, "", "evaluate"], [4, 2, 1, "", "get_data_strategy"], [4, 2, 1, "", "get_info"], [4, 2, 1, "", "get_model"], [4, 2, 1, "", "get_model_type"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "get_path"], [4, 2, 1, "", "is_pickled"], [4, 3, 1, "", "model"], [4, 3, 1, "", "model_class"], [4, 3, 1, "", "params"], [4, 3, 1, "", "pickled_model"], [4, 2, 1, "", "print_evaluation_results"], [4, 2, 1, "", "save"], [4, 2, 1, "", "set_data_strategy"], [4, 2, 1, "", "set_file_path"], [4, 2, 1, "", "set_model"], [4, 2, 1, "", "set_params"], [4, 2, 1, "", "update_params"], [4, 2, 1, "", "validate_params"]], "MED3pa.models.abstract_models.RegressionModel": [[4, 2, 1, "", "predict"], [4, 2, 1, "", "train"]], "MED3pa.models.base": [[4, 1, 1, "", "BaseModelManager"]], "MED3pa.models.base.BaseModelManager": [[4, 2, 1, "", "clone_base_model"], [4, 2, 1, "", "get_instance"], [4, 2, 1, "", "reset"], [4, 2, 1, "", "set_base_model"]], "MED3pa.models.classification_metrics": [[4, 1, 1, "", "ClassificationEvaluationMetrics"]], "MED3pa.models.classification_metrics.ClassificationEvaluationMetrics": [[4, 2, 1, "", "accuracy"], [4, 2, 1, "", "average_precision"], [4, 2, 1, "", "balanced_accuracy"], [4, 2, 1, "", "f1_score"], [4, 2, 1, "", "get_metric"], [4, 2, 1, "", "log_loss"], [4, 2, 1, "", "matthews_corrcoef"], [4, 2, 1, "", "npv"], [4, 2, 1, "", "ppv"], [4, 2, 1, "", "precision"], [4, 2, 1, "", "recall"], [4, 2, 1, "", "roc_auc"], [4, 2, 1, "", "sensitivity"], [4, 2, 1, "", "specificity"], [4, 2, 1, "", "supported_metrics"]], "MED3pa.models.concrete_classifiers": [[4, 1, 1, "", "XGBoostModel"]], "MED3pa.models.concrete_classifiers.XGBoostModel": [[4, 2, 1, "", "evaluate"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "train"], [4, 2, 1, "", "train_to_disagree"]], "MED3pa.models.concrete_regressors": [[4, 1, 1, "", "DecisionTreeRegressorModel"], [4, 1, 1, "", "RandomForestRegressorModel"]], "MED3pa.models.concrete_regressors.DecisionTreeRegressorModel": [[4, 2, 1, "", "evaluate"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "train"]], "MED3pa.models.concrete_regressors.RandomForestRegressorModel": [[4, 2, 1, "", "evaluate"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "train"]], "MED3pa.models.data_strategies": [[4, 1, 1, "", "DataPreparingStrategy"], [4, 1, 1, "", "ToDataframesStrategy"], [4, 1, 1, "", "ToDmatrixStrategy"], [4, 1, 1, "", "ToNumpyStrategy"]], "MED3pa.models.data_strategies.DataPreparingStrategy": [[4, 2, 1, "", "execute"]], "MED3pa.models.data_strategies.ToDataframesStrategy": [[4, 2, 1, "", "execute"]], "MED3pa.models.data_strategies.ToDmatrixStrategy": [[4, 2, 1, "", "execute"], [4, 2, 1, "", "is_supported_data"]], "MED3pa.models.data_strategies.ToNumpyStrategy": [[4, 2, 1, "", "execute"]], "MED3pa.models.factories": [[4, 1, 1, "", "ModelFactory"], [4, 1, 1, "", "XGBoostFactory"]], "MED3pa.models.factories.ModelFactory": [[4, 2, 1, "", "create_model_from_pickled"], [4, 2, 1, "", "create_model_with_hyperparams"], [4, 3, 1, "", "factories"], [4, 2, 1, "", "get_factory"], [4, 2, 1, "", "get_supported_models"], [4, 3, 1, "", "model_mapping"]], "MED3pa.models.factories.XGBoostFactory": [[4, 2, 1, "", "check_version"], [4, 2, 1, "", "create_model_from_pickled"], [4, 2, 1, "", "create_model_with_hyperparams"], [4, 2, 1, "", "extract_params"]], "MED3pa.models.regression_metrics": [[4, 1, 1, "", "RegressionEvaluationMetrics"]], "MED3pa.models.regression_metrics.RegressionEvaluationMetrics": [[4, 2, 1, "", "get_metric"], [4, 2, 1, "", "mean_absolute_error"], [4, 2, 1, "", "mean_squared_error"], [4, 2, 1, "", "r2_score"], [4, 2, 1, "", "root_mean_squared_error"], [4, 2, 1, "", "supported_metrics"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "terms": {"": [2, 3, 4, 6, 7, 10], "0": [1, 2, 3, 4, 5, 6, 9, 10], "00016360887668277182": 6, "01": 3, "05": [2, 3, 9], "1": [3, 7, 11], "10": [2, 3, 5, 9, 10], "100": [2, 3, 9], "1000": [5, 10], "15": [3, 6], "151": 5, "16": 6, "2": [3, 7, 11], "20": [2, 3, 5, 9], "200": 3, "2023": 2, "23": 5, "2631530214330944": 6, "29": 6, "3": [2, 3, 7, 8, 11], "30": 3, "34567901234568": 6, "3545": 6, "38": 6, "4": [3, 7, 11], "42": [3, 5], "466666666666667": 6, "4685784328619402": 6, "5": [1, 3, 4, 7, 11], "50": [3, 9, 10], "51": 10, "54288": 3, "592592592592592": 6, "6": [7, 8, 10, 11], "7": [6, 7, 11], "716049382716047": 6, "8": [6, 10], "8111111111111111": 6, "9": [3, 8], "A": [1, 2, 3, 4], "As": 5, "By": [3, 4], "For": [5, 6, 7, 10], "If": [1, 2, 3, 4, 8, 9, 10], "In": [2, 3, 9, 10], "It": [1, 2, 3, 4, 7, 9, 10], "Not": 5, "Such": 3, "The": [1, 2, 3, 4, 5, 6, 7, 9, 10], "These": [2, 4], "To": [5, 8, 9, 10], "With": [5, 10], "_forest": 3, "_treenod": 3, "abc": [1, 3, 4], "abl": 9, "about": [1, 3, 4, 5, 9, 10], "abov": 2, "absolut": [3, 4], "absolute_error": [3, 9], "absoluteerror": [0, 3, 7, 9], "abstract": [1, 2, 3, 4], "abstract_metr": [0, 7], "abstract_model": [0, 7], "access": [1, 2, 4], "accommod": [1, 3], "accord": 4, "accur": 3, "accuraci": [0, 3, 4, 7, 9, 10], "across": [1, 2, 3, 4], "actual": 3, "ad": [2, 3, 7], "adapt": [3, 4, 7], "add": [1, 3], "addit": [1, 2, 4, 5, 10], "addition": [2, 3], "additional_arg": 3, "additonn": 9, "address": 7, "adjust": 4, "advanc": [0, 7], "affect": [3, 7], "after": [1, 2, 9], "against": [4, 6], "aggreg": [2, 3], "agre": 2, "aid": 3, "aim": [2, 3], "algorithm": [3, 4], "all": [1, 2, 3, 4, 5, 9, 10], "all_dr": 3, "allow": [1, 2, 3, 4, 7], "allow_margin": [2, 3, 9], "along": [1, 5], "alongsid": [3, 5, 6, 9], "alpha": 10, "alreadi": [4, 5], "also": [3, 4, 5, 6, 9, 10], "altern": [6, 9], "among": 10, "an": [1, 2, 3, 4, 6, 7, 9, 11], "analysi": [0, 1, 2, 7], "analyt": 3, "analyz": [2, 3, 7, 11], "analyze_result": [2, 6], "ani": [1, 3, 4], "anoth": [1, 3, 4], "apc": [3, 9], "apc_cv": 3, "apc_evalu": 3, "apc_grid_param": 3, "apc_model": [3, 9], "apc_param": [3, 9], "apc_valu": 3, "apcmodel": [0, 3, 7], "api": 4, "append": [2, 3], "appli": [1, 2], "applic": [2, 3, 4], "approach": [2, 3, 4, 10], "ar": [1, 2, 3, 4, 5, 8, 9, 10], "architectur": 7, "area": 2, "arg": 3, "arrai": [1, 2, 3, 4, 5], "aspect": [4, 7], "assertionerror": 4, "assess": [2, 3, 4, 6], "associ": [2, 3, 4], "attempt": 4, "attribut": [2, 4], "auc": [2, 3, 4, 9, 10], "augment": 3, "auprc": [3, 10], "auto": 3, "autom": 2, "automat": 5, "avail": [4, 5], "averag": 4, "average_precis": [0, 4, 7], "avoid": 5, "backbon": 4, "bag": 3, "balanc": [4, 10], "balance_train_class": [4, 10], "balance_train_weight": [0, 4, 7], "balanced_accuraci": [0, 4, 7], "balancedaccuraci": [3, 9, 10], "base": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10], "base_model_manag": [2, 3, 6, 8, 9], "base_scor": 10, "baselin": 2, "baseline_mean": 6, "baseline_std": 6, "basemodelmanag": [0, 2, 3, 4, 6, 7, 8, 9], "basic": [4, 7], "been": [1, 2, 4, 10], "befor": [2, 4, 8, 10], "begin": 5, "behavior": 4, "being": 4, "below": 8, "best": 3, "better": 10, "between": [2, 3, 6, 9], "binari": [1, 4, 10], "block": 6, "bool": [1, 2, 3, 4], "boolean": [1, 4, 5], "boost_from_averag": 10, "booster": [4, 10], "bootstrap": 3, "both": [2, 3, 7, 9], "bu": 9, "build": 3, "build_tre": [0, 3, 7], "built": [1, 4], "c": 8, "cache_opt": 10, "cal_record": 2, "calc_metrics_by_dr": [0, 3, 7], "calc_metrics_by_profil": [0, 3, 7], "calc_profil": [0, 3, 7], "calc_profiles_deprec": [0, 3, 7], "calcul": [0, 2, 3, 4, 7, 10], "calculate_uncertainti": [0, 3, 7], "calib_result": 2, "calibr": [2, 3], "calibration_record": 2, "calibration_trajectori": 2, "call": [2, 3], "can": [2, 3, 4, 5, 6, 7, 8, 9, 10], "capabl": [1, 2, 7], "captur": 2, "case": [1, 7, 9, 10], "ccp_alpha": 3, "cdc": 2, "ceas": 2, "central": 4, "certain": 2, "challeng": [2, 7], "chang": 3, "check": [2, 4, 10], "check_vers": [0, 4, 7], "choic": 3, "choos": 3, "chosen": 3, "class": [1, 2, 3, 4, 6, 7, 9, 11], "classif": 4, "classifi": 2, "classification_metr": [0, 7, 10], "classificationevaluationmetr": [0, 4, 7, 10], "classificationmodel": [0, 4, 7], "classmethod": [2, 3, 4], "clear": [1, 4], "clinic": 3, "clone": [0, 1, 4, 5, 7], "clone_base_model": [0, 4, 7], "cloned_inst": 5, "code": [3, 6], "coeffici": 4, "collect": [2, 3], "colsample_bytre": 10, "column": [1, 4, 5], "column_label": [1, 4, 5], "combin": [0, 1, 3, 7, 9], "command": 8, "common": [1, 4, 5], "compar": [2, 3, 7, 11], "comparaison": [0, 3, 6, 7, 9], "compare_config": [0, 2, 3, 7], "compare_count": 2, "compare_detectron_result": 2, "compare_evalu": 2, "compare_experi": [0, 2, 3, 6, 7, 9], "compare_global_metr": [0, 3, 7], "compare_models_evalu": [0, 3, 7], "compare_profiles_detectron_result": [0, 3, 7], "compare_profiles_metr": [0, 3, 7], "comparison": [2, 3], "compat": 4, "complet": 3, "complex": [1, 3, 4, 7], "compli": 4, "compon": [0, 1, 5, 7], "compos": [1, 4], "composit": 3, "compraison": [0, 7], "comprehens": [3, 4, 7, 9, 10], "comput": [2, 3, 4], "concept": 3, "concret": [1, 3, 4], "concrete_classifi": [0, 7], "concrete_regressor": [0, 3, 7, 9], "condit": [2, 7], "conduct": 2, "confid": [1, 3, 5, 7], "confidence_scor": [1, 3, 5], "config": [2, 3], "configur": [1, 2, 3, 4, 7, 10, 11], "consecut": 2, "consid": [2, 3], "consist": [2, 3, 4, 7, 11], "constrain": 2, "construct": [3, 7], "contain": [1, 2, 3, 4, 9], "context": [1, 3], "contrast": 3, "control": [2, 3], "convers": 4, "convert": [1, 2, 3, 4, 5], "coordin": [1, 2], "copi": 5, "core": [1, 4], "correl": 4, "correspond": [1, 3, 4], "cost": 3, "could": 2, "count": [0, 1, 2, 7], "count_quantil": [0, 2, 7], "covari": [2, 6, 7, 9], "cpu": 10, "craft": 10, "creat": [1, 4, 7, 11], "create_model_from_pickl": [0, 4, 6, 7, 8, 9, 10], "create_model_with_hyperparam": [0, 4, 7, 10], "creation": [4, 7], "criteria": [2, 3], "criterion": [2, 3], "critic": [2, 3, 7], "cross": 3, "crucial": [2, 3, 4, 5, 7], "csv": [1, 2, 5, 6, 8, 9], "csvdataloadingstrategi": [0, 1, 7], "cumul": 2, "current": [1, 2, 3, 4, 10], "curv": 2, "custom": [3, 5], "cut": 2, "cv": 3, "d": 10, "data": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11], "data_preparation_strategi": [0, 4, 7, 10], "data_strategi": [0, 7], "datafram": [1, 2, 3, 4, 5], "dataloadingcontext": [0, 1, 7], "dataloadingstrategi": [0, 1, 7], "datapreparingstrategi": [0, 4, 7], "dataset": [0, 2, 3, 4, 7, 8, 10, 11], "dataset_typ": [1, 5, 6, 8, 9], "datasetmanag": 9, "datasets2": [6, 9], "datasets_manag": [3, 9], "datasetsmanag": [0, 1, 2, 3, 6, 7, 8, 9, 11], "deal": 7, "decis": [3, 7], "decisiontre": 4, "decisiontreeregressor": [3, 4], "decisiontreeregressormodel": [0, 3, 4, 7], "declar": [3, 9], "decoupl": 4, "decreas": 3, "dedic": 3, "deep": 4, "default": [1, 2, 3, 4], "default_param": [0, 3, 7], "defin": [1, 2, 3, 4, 9, 10], "definit": 4, "demonstr": 10, "deploi": [3, 7], "deploy": 3, "depth": 3, "deriv": [1, 2, 3], "describ": 2, "descript": [2, 3], "deseri": 4, "design": [1, 2, 3, 4, 5, 6, 7], "desir": 3, "detail": [1, 3, 4, 5, 6, 10], "detect": [2, 7, 9], "detectron": [0, 1, 3, 4, 7, 8, 11], "detectron_by_profil": [0, 3, 7], "detectron_by_profiles_deprec": [0, 3, 7], "detectron_experiment_comparaison": 6, "detectron_experiment_result": 6, "detectron_experiment_results2": 6, "detectron_param": 2, "detectron_result": [2, 3, 8, 9], "detectroncomparaison": 6, "detectroncomparison": [2, 6], "detectronensembl": [0, 2, 7], "detectronexperi": [2, 6], "detectronrecord": [0, 2, 7], "detectronrecordsmanag": [0, 2, 7], "detectronresult": [2, 3], "detectronstrategi": [2, 3], "determin": [2, 3, 6], "develop": [4, 7], "deviat": 2, "devic": 10, "df": 5, "diabetes_xgb_model": 8, "dict": [1, 2, 3, 4], "dictionari": [1, 2, 3, 4], "differ": [1, 2, 3, 4, 5, 6, 7, 9], "directli": [5, 8, 9, 10], "directori": [2, 3, 4, 8, 9], "directory_path": [2, 3], "disagr": [2, 3, 4, 6], "disagre": [2, 4], "discov": [7, 11], "discrep": 2, "displai": 10, "dissimilar": 2, "distinct": 7, "distribut": [2, 3, 4, 6, 7], "diverg": 4, "divers": 2, "dmatrix": [4, 10], "do": [1, 3], "document": 9, "doe": [1, 4], "doesn": 1, "domain": [1, 2, 6], "don": [5, 9], "dr": 3, "draw": 3, "driven": 1, "drop": 5, "dtr": 3, "dure": [3, 4, 5], "dynam": [1, 3, 4], "e": [2, 3, 5], "each": [1, 2, 3, 4, 5, 7], "earli": [2, 3, 7], "earlystopp": [0, 2, 7], "easi": 1, "easier": [2, 4], "easili": 7, "ecdf": 2, "edg": 7, "effect": [2, 3, 7, 10], "effici": [4, 5], "effortlessli": 7, "either": [2, 3, 4, 9, 10], "element": 1, "emphasi": 7, "empir": 2, "emploi": [2, 3, 4, 7], "empti": 4, "enabl": [1, 2, 4], "encapsul": [2, 3, 5], "encount": 1, "end": 2, "enhanc": [2, 3, 4, 7], "enhanced_disagreement_strategi": [2, 3, 6], "enhanceddisagreementstrategi": [2, 6, 9], "ens_siz": 2, "ensembl": [0, 3, 7], "ensemble_s": [2, 3, 9], "ensur": [1, 2, 3, 4, 7, 8, 11], "entir": 2, "environ": 3, "epoch": 2, "equal": 3, "erron": 7, "error": [2, 3, 4, 5], "error_prob": 3, "especi": 3, "essenc": 3, "essenti": 5, "estim": [3, 7], "eta": 10, "etc": [1, 4, 9], "eval_metr": [3, 4, 10], "evalu": [0, 2, 3, 4, 5, 6, 7, 11], "evaluate_ensembl": [0, 2, 7], "evaluate_model": [3, 9], "evaluation_result": 10, "evaluationmetr": [0, 4, 7], "examin": 10, "exampl": [4, 5, 7, 10], "exclud": [1, 5], "execut": [0, 1, 2, 3, 4, 6, 7, 8, 9], "exist": [1, 2, 7], "expect": 4, "experi": [0, 7, 8, 11], "experiment": [2, 5], "experiment_result": 6, "experiment_results2": 6, "explicitli": 2, "explor": [3, 7], "extend": [4, 7], "extens": [0, 1, 7], "extern": 3, "extract": [1, 3, 4, 5, 9, 10], "extract_param": [0, 4, 7], "f1": [4, 10], "f1_score": [0, 4, 7], "f1score": [3, 10], "face": 7, "facilit": [2, 3, 4, 5], "factori": [0, 6, 7, 8, 9, 10], "fail": 3, "failur": 3, "fals": [1, 2, 3, 4, 5, 9, 10], "fashion": [2, 3], "featur": [1, 2, 3, 4, 7, 11], "feature_1": 5, "feature_2": 5, "feature_23": 5, "feature_nam": 3, "file": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "file_nam": 2, "file_path": [1, 2, 3, 4, 5, 8, 9], "filenam": 3, "filter": [3, 5], "final": [2, 6, 10], "first": [2, 3, 5, 6, 9], "fit": 3, "flexibl": [1, 4, 5, 7], "float": [1, 2, 3, 4], "flow": 2, "focu": 2, "focus": [1, 3, 7], "fold": 3, "follow": [1, 2, 3, 4, 6, 8, 9, 10], "forc": 9, "forest": 3, "format": [1, 2, 3, 4, 5], "found": [1, 4], "foundat": 4, "four": 7, "fraction": 3, "framework": [1, 3, 4], "freez": [0, 2, 7], "friedman_ms": 3, "from": [1, 2, 3, 4, 5, 6, 7, 8, 11], "frozen": 3, "fulli": [2, 4], "function": [1, 2, 3, 4, 5, 10], "further": 3, "g": [2, 3, 5], "gatewai": 10, "gbtree": 10, "gener": [1, 2, 3, 4, 10], "get": [1, 2, 3, 4, 7, 8, 11], "get_all_nod": [0, 3, 7], "get_all_profil": [0, 3, 7], "get_column_label": [0, 1, 5, 7], "get_confidence_scor": [0, 1, 3, 5, 7], "get_data_strategi": [0, 4, 7], "get_dataset_by_typ": [0, 1, 5, 7], "get_evalu": [0, 2, 7], "get_experiments_result": 2, "get_factori": [0, 4, 7], "get_file_path": [0, 1, 7], "get_info": [0, 1, 3, 4, 7, 10], "get_inst": [0, 4, 7], "get_lost_profil": [0, 3, 7], "get_metr": [0, 4, 7], "get_model": [0, 4, 7], "get_model_typ": [0, 4, 7], "get_observ": [0, 1, 5, 7], "get_param": [0, 4, 7], "get_path": [0, 4, 7], "get_profil": [0, 3, 7], "get_profiles_manag": [0, 3, 7], "get_pseudo_label": [0, 1, 5, 7], "get_pseudo_prob": [0, 1, 7], "get_record": [0, 2, 7], "get_sample_count": [0, 1, 7], "get_strategi": [0, 1, 7], "get_supported_model": [0, 4, 7, 10], "get_supported_strategi": 2, "get_true_label": [0, 1, 5, 7], "ginsberg": 2, "give": 10, "given": [1, 2, 3, 4], "global": 3, "goal": 7, "greater": [1, 3], "grid": 3, "grid_param": 3, "grid_search_param": 3, "gridsearchcv": 3, "group": [3, 7], "grow": 3, "grow_quantile_histmak": 10, "guid": [5, 6, 9], "ha": [1, 2, 4, 5, 10], "halt": 2, "handl": [1, 2, 3, 4, 5, 7, 10], "harm": 2, "has_confidence_scor": 5, "has_pseudo_label": 5, "has_pseudo_prob": 5, "have": [2, 5, 8], "healthcar": [3, 7], "help": [2, 3, 7], "helper": 1, "here": [7, 8, 10], "highlight": 3, "hist": 10, "hold": [1, 2, 3], "host": 4, "hous": 2, "how": [1, 3, 4, 7, 10], "hyperparam": 4, "hyperparamet": [2, 4, 10], "hypothesi": 2, "i": [1, 2, 3, 4, 5, 6, 7, 8, 10], "id": [2, 3], "identif": [3, 7], "identifi": [2, 3, 7], "identify_shared_profil": [0, 3, 7], "ie": 3, "impact": 7, "implement": [1, 2, 3, 4], "import": [6, 7, 8, 9, 11], "improv": [2, 3], "impur": 3, "includ": [1, 2, 3, 4, 5, 7, 9, 10], "incorpor": 2, "increas": 3, "independ": 4, "index": 7, "indic": [1, 2, 4, 5, 9, 10], "individu": [2, 3, 7], "induc": 3, "info": 3, "inform": [1, 3, 4, 5, 7, 9, 11], "inherit": 4, "initi": [3, 4, 5, 6, 8, 9, 10], "initializinf": 4, "innov": 3, "input": [3, 4, 10], "insert": 3, "insert_lost_profil": [0, 3, 7], "insert_profil": [0, 3, 7], "insight": 3, "inspect": [6, 10], "instanc": [1, 2, 3, 4, 7, 9, 11], "instanti": [4, 10], "instead": [3, 4], "int": [1, 2, 3, 4], "integr": [0, 4, 7, 8, 9], "intend": 4, "intens": 2, "intention": 4, "interfac": [1, 3, 4], "intern": 3, "introduc": [2, 3, 4], "invalid": [1, 4], "ioerror": 4, "ipc": [3, 9], "ipc_cv": 3, "ipc_evalu": 3, "ipc_grid_param": 3, "ipc_model": [3, 9], "ipc_param": [3, 9], "ipc_typ": [3, 9], "ipc_valu": 3, "ipcmodel": [0, 3, 7], "is_compar": [0, 2, 3, 7], "is_pickl": [0, 4, 7], "is_supported_data": [0, 4, 7], "iter": 2, "its": [4, 7, 10], "job": 3, "joblib": 3, "json": [2, 3, 4, 10], "just": 3, "keep": 1, "kei": [0, 4], "kept": 2, "knowledg": 10, "kolmogorov": 2, "krishnan": 2, "label": [1, 2, 3, 4, 5, 10], "lambda": 4, "larg": 6, "largest": 3, "later": 8, "latest": 2, "lead": 7, "leaf": 3, "learn": [1, 2, 4, 5, 7, 10], "least": 1, "len": 5, "length": 1, "let": 10, "level": [2, 3, 7], "leverag": [2, 4, 10], "liang": 2, "librari": 4, "like": [1, 2, 3, 4, 10], "limit": 2, "list": [1, 2, 3, 4, 5, 10], "load": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11], "load_as_np": [0, 1, 7], "load_model": [0, 3, 7], "load_tre": [0, 3, 7], "loaded_model": 4, "loading_context": [0, 7], "loading_strategi": [0, 7], "log": 4, "log2": 3, "log_loss": [0, 4, 7], "logic": [2, 4], "logist": 10, "logloss": [3, 10], "look": 3, "loss": 4, "lost": 3, "machin": [1, 2, 4, 5, 7, 10], "made": 4, "mae": [3, 4], "maintain": [5, 7], "mainten": 1, "make": [1, 3, 4, 7, 10], "manag": [0, 2, 3, 4, 5, 6, 7, 10], "mani": 1, "manipul": [1, 2, 3, 5], "mann": 2, "manner": 4, "mannwhitney_strategi": [2, 6], "mannwhitneystrategi": [2, 6], "margin": [2, 3, 9], "mask": [0, 5, 7], "maskeddataset": [0, 1, 3, 7, 11], "match": [1, 4, 5], "matrix": 3, "matthew": 4, "matthews_corrcoef": [0, 4, 7], "max_depth": [3, 9, 10], "max_ensemble_s": 2, "max_featur": 3, "max_leaf_nod": 3, "max_sampl": 3, "maximum": [2, 3], "mcc": [3, 10], "mdr": [0, 7], "mdrcalcul": [0, 3, 7], "mean": [2, 3, 4], "mean_absolute_error": [0, 4, 7], "mean_squared_error": [0, 4, 7], "measur": [2, 3, 7], "med3pa": [0, 1, 2, 4, 5, 6, 8, 10, 11], "med3pa_comparaison_result": 9, "med3pa_detectron_experiment_result": [8, 9], "med3pa_experiment_result": 9, "med3pa_experiment_results_2": 9, "med3pa_experiment_results_2_pretrain": 9, "med3pa_experiment_results_model": 9, "med3pa_experiment_results_pretrain": 9, "med3pa_metr": [3, 9], "med3pa_result": 9, "med3pacomparaison": 9, "med3pacomparison": [0, 3, 7, 9], "med3padetectron": 3, "med3padetectronexperi": [0, 3, 7, 8, 9], "med3padetectronresult": 3, "med3paexperi": [0, 2, 3, 7, 9], "med3parecord": [0, 3, 7], "med3paresult": [0, 3, 7, 9], "meet": 3, "merg": 4, "met": 2, "method": [1, 2, 3, 4, 5, 6, 7, 10], "methodologi": [3, 4], "meticul": [2, 3, 4], "metric": [2, 3, 4, 10], "metric_map": [0, 3, 7], "metric_nam": [3, 4], "metrics_by_dr": 3, "metrics_list": 3, "might": [3, 5, 7], "min": 2, "min_ca": 3, "min_child_weight": 10, "min_delta": 2, "min_impurity_decreas": 3, "min_samples_leaf": 3, "min_samples_ratio": 3, "min_samples_split": 3, "min_weight_fraction_leaf": 3, "minim": [3, 7], "minimum": 3, "mitig": 3, "mix": 3, "ml": 1, "mode": [2, 3], "model": [0, 1, 2, 5, 7, 8, 11], "model_class": [0, 4, 7], "model_id": 2, "model_info": 10, "model_map": [0, 4, 7], "model_nam": 3, "model_typ": [4, 10], "modelfactori": [0, 4, 6, 7, 8, 9, 11], "models_metr": [3, 9], "moder": 6, "modif": 4, "modul": [0, 7, 11], "modular": [2, 3, 4, 7], "monitor": 2, "more": [3, 5, 7, 9], "most": 7, "mpc": 3, "mpcmodel": [0, 3, 7], "mse": [3, 4, 9], "multipl": [1, 2, 4], "must": [2, 4], "n": [1, 4, 5], "n_estim": [3, 9], "n_featur": 3, "n_job": 3, "n_run": 2, "name": [1, 2, 3, 4, 5], "ndarrai": [1, 2, 3, 4], "necessari": [4, 6, 7, 11], "need": [1, 3, 4, 5, 6, 7, 9, 10], "neg": 4, "neither": 2, "new": [1, 2, 3, 4, 7, 9, 10], "next": [6, 9], "node": 3, "node_id": 3, "non": 4, "none": [1, 2, 3, 4], "nor": 2, "notimplementederror": 4, "now": 10, "np": [1, 2, 3, 4, 5, 10], "npv": [0, 4, 7, 10], "nthread": 10, "nuanc": 5, "num_calibration_run": [2, 3, 9], "num_featur": 5, "num_sampl": 5, "number": [1, 2, 3, 4, 5], "numpi": [1, 4, 5], "o": [0, 3, 7], "obj": 3, "object": [1, 2, 3, 4, 10], "observ": [1, 2, 3, 4, 5], "offer": [2, 3, 4, 7, 10], "onc": [4, 5, 10], "one": [2, 3, 9], "onli": [1, 2, 3, 4, 5, 9, 10], "oob_scor": 3, "oper": [1, 2, 4, 7, 11], "optim": [0, 3, 4, 7, 10], "option": [1, 2, 3, 4], "orchestr": [2, 3], "origin": [1, 2, 3, 5], "original_count": 2, "original_disagreement_strategi": 2, "originaldisagreementstrategi": 2, "other": [1, 2, 3, 6, 9, 10], "otherwis": [2, 3, 4], "our": 3, "out": [3, 5], "outcom": [2, 3, 6, 8, 9], "outlin": 2, "output": [2, 3, 4, 6, 7, 9, 10, 11], "over": 3, "overfit": [2, 10], "overhead": 2, "overview": 0, "own": [6, 9], "p": 2, "p_valu": 6, "packag": [1, 3, 4, 8, 10], "page": 7, "panda": [1, 2, 4, 5], "paper": 2, "parallel": 3, "parallel_backend": 3, "param": [0, 3, 4, 7, 10], "param_grid": 3, "paramet": [1, 2, 3, 4, 6, 9, 10], "particularli": [1, 3, 4, 7], "pass": [4, 5], "path": [1, 2, 3, 4, 5, 6, 10], "path_to_fil": 1, "path_to_model": [6, 9, 10], "path_to_reference_data": 9, "path_to_reference_dataset": 6, "path_to_save_training_dataset": 5, "path_to_test_data": 9, "path_to_test_dataset": 6, "path_to_train_dataset": 6, "path_to_training_dataset": 5, "path_to_validation_dataset": [5, 6], "patienc": [2, 3, 9], "pattern": [1, 3, 4, 7], "pd": [1, 2, 5], "percentag": 3, "perform": [2, 3, 4, 7, 9, 10, 11], "phase": [1, 2], "pickl": [3, 4, 9, 10], "pickled_file_path": 4, "pickled_model": [0, 4, 7, 10], "pinpoint": 3, "pip": 7, "pipelin": [1, 2], "pkl": [3, 6, 8, 9, 10], "plu": 3, "point": [1, 2, 3, 5], "poisson": 3, "poor": 7, "popul": 3, "pose": 2, "posit": 4, "possibli": [2, 6], "potenti": [2, 3], "pprint": 10, "ppv": [0, 4, 7, 10], "practic": [4, 7], "pre": [3, 6, 8, 9, 10], "precis": [0, 3, 4, 7, 10], "predefin": 10, "predict": [0, 2, 3, 4, 6, 7, 11], "predicted_label": 10, "predicted_prob": [0, 2, 3, 7, 10], "prepar": [1, 4, 5, 10], "prerequisit": 7, "presenc": 2, "present": 2, "pretrain": [3, 7, 11], "pretrained_apc": [3, 9], "pretrained_ipc": [3, 9], "pretrained_model": 3, "prevent": [2, 7, 10], "previou": [3, 10], "previous": 9, "primari": 2, "print": [1, 3, 4, 5, 8, 10], "print_decision_tree_structur": [0, 3, 7], "print_evaluation_result": [0, 4, 7], "print_result": [3, 4, 10], "priorit": 1, "proactiv": 3, "probabl": [1, 2, 3, 4, 5, 6, 10], "problemat": [3, 7, 9], "proce": 10, "procedur": 7, "process": [1, 2, 4, 5, 6, 9, 10], "produc": 4, "profil": [0, 7, 9], "profile_manag": 3, "profilemanag": 3, "profiles_list": 3, "profiles_manag": 3, "profilesmanag": [0, 3, 7], "project": [1, 7], "properli": 4, "proport": 2, "proportion_to_cut": 2, "protocol": 2, "prototyp": 4, "provid": [1, 2, 3, 4, 5, 6, 7, 10], "prune": 3, "pseudo": [1, 5], "pseudo_label": [1, 5], "pseudo_prob": [1, 5], "purpos": 10, "py": [1, 2, 4], "pypi": 8, "python": [1, 6, 8], "pytorch": 1, "qualiti": 3, "quantifi": [2, 3], "quantil": 2, "r": [2, 4], "r2": 4, "r2_score": [0, 4, 7], "rais": [1, 2, 4], "rand": 5, "randint": 10, "randn": 10, "random": [1, 2, 3, 5, 10], "random_st": 3, "randomforestregressor": [3, 4, 9], "randomforestregressormodel": [0, 3, 4, 7, 9], "randomli": [1, 5], "rate": [2, 3, 9], "ratio": 3, "raw": 4, "re": 9, "read_csv": 5, "readi": [1, 4, 8], "real": [3, 7], "recal": [0, 4, 7, 10], "record": [0, 3, 7], "recreat": 4, "recurs": 3, "reduc": 2, "reduct": 3, "refer": [1, 2, 3, 4, 5, 6, 8, 9], "reference_dataset": 6, "reference_mpc_valu": 3, "reference_record": 3, "reference_result": 8, "reference_set": 5, "refin": [0, 1, 2, 5, 7], "regress": [1, 3, 4], "regression_metr": [0, 7], "regressionevaluationmetr": [0, 4, 7], "regressionmodel": [0, 4, 7], "regressor": 3, "reiniti": 4, "reject": 2, "rejected_count": [0, 2, 7], "rejected_count_quantil": [0, 2, 7], "rejection_r": [0, 2, 7], "rel": 3, "relat": [1, 5], "relev": 3, "reliabl": [2, 3, 4, 7], "remain": [1, 2, 3, 5, 7], "remaining_sampl": 5, "repeat": 2, "repres": [2, 3, 4], "represent": [2, 3], "reproduc": 2, "requir": [3, 4, 7, 10], "reset": [0, 1, 4, 7, 11], "reset_dataset": [0, 1, 5, 7], "reset_indic": [0, 1, 7], "respons": [1, 2, 4], "result": [2, 3, 4, 7, 8, 10, 11], "results1_path": [2, 3], "results2": 9, "results2_path": [2, 3], "retrain": 7, "retriev": [1, 2, 3, 4, 7, 11], "return": [1, 2, 3, 4, 9, 10], "return_inst": [1, 5], "return_proba": [4, 10], "reus": 3, "reusabl": 4, "right": 1, "risk": 2, "rmse": [3, 4, 9], "robust": [2, 3, 4, 5, 6, 7], "roc": 4, "roc_auc": [0, 4, 7], "root": [3, 4], "root_mean_squared_error": [0, 4, 7], "run": [0, 2, 3, 5, 7, 8, 11], "runtim": 4, "safer": 3, "same": [1, 2, 3, 9], "sampl": [1, 2, 3, 4, 5], "sample_random": [0, 1, 7], "sample_s": 2, "sample_uniform": [0, 1, 7], "sample_weight": [3, 4], "sampled_inst": 5, "samples_ratio": 3, "samples_ratio_max": [3, 9], "samples_ratio_min": [3, 9], "samples_ratio_step": [3, 9], "samples_s": [2, 3, 9], "samples_size_profil": 3, "save": [0, 1, 2, 3, 4, 7, 8, 11], "save_al": 3, "save_config": 2, "save_dataset_to_csv": [0, 1, 5, 7], "save_model": [0, 3, 7, 9], "save_to_csv": [0, 1, 5, 7], "save_tre": [0, 3, 7], "saved_model": 10, "scalabl": [4, 7], "scenario": [4, 5], "scienc": 7, "score": [1, 2, 3, 4, 5, 6, 10], "scrutin": 3, "seamlessli": 2, "search": [3, 7], "section": [7, 10], "see": [5, 8, 9], "seed": [0, 1, 2, 5, 7, 10], "segment": 5, "select": 1, "self": 2, "sensit": [0, 3, 4, 7, 10], "separ": 1, "seri": 3, "serial": [2, 3, 4, 7, 11], "serializ": 3, "serv": [4, 10], "set": [1, 2, 3, 4, 5, 7, 8, 11], "set_base_model": [0, 4, 6, 7, 8, 9], "set_column_label": [0, 1, 7], "set_confidence_scor": [0, 1, 3, 7], "set_data_strategi": [0, 4, 7], "set_dataset": [0, 3, 7], "set_detectron_result": [0, 3, 7], "set_evalu": [0, 2, 7], "set_experiment_config": [0, 2, 3, 7], "set_file_path": [0, 1, 4, 7], "set_from_data": [0, 1, 5, 7], "set_from_fil": [0, 1, 5, 6, 7, 8, 9], "set_metrics_by_dr": [0, 3, 7], "set_model": [0, 3, 4, 7], "set_models_evalu": [0, 3, 7], "set_param": [0, 4, 7], "set_profiles_manag": [0, 3, 7], "set_pseudo_label": [0, 1, 7], "set_pseudo_probs_label": [0, 1, 5, 7], "set_strategi": [0, 1, 7], "set_tre": [0, 3, 7], "setup": [1, 2, 4], "sever": 4, "shape": 1, "share": 3, "shared_profil": 3, "shift": [2, 3, 6, 7, 9], "shift_prob": 6, "should": [2, 3, 4, 5, 9], "show_detail": 1, "signific": [2, 6, 7], "significance_descript": 6, "similar": [3, 4, 5], "singl": 2, "singleton": 4, "size": [2, 3], "sklearn": [3, 4], "small": 6, "smaller": 3, "smirnov": 2, "so": 3, "solut": [3, 7], "sophist": [2, 3], "sourc": [1, 2, 3, 4], "special": 4, "specif": [0, 1, 2, 3, 4, 5, 7, 10], "specifi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "split": [3, 5], "splitter": 3, "sqrt": 3, "squar": 4, "squared_error": 3, "stabil": [6, 7], "standard": [2, 4], "start": [3, 8, 10], "state": [7, 11], "static": [1, 2, 3, 4], "statist": 2, "statu": 5, "step": [3, 7, 11], "stop": [2, 3], "stopper": [0, 7], "storag": [2, 3], "store": [2, 3, 5], "str": [1, 2, 3, 4], "strategi": [0, 1, 3, 4, 6, 7, 9, 10], "strategy_map": 2, "streamlin": 10, "string": [2, 3], "strong": 7, "structur": [1, 3, 4, 7, 9], "subclass": [2, 4], "submodul": 5, "suboptim": 3, "subpackag": [0, 11], "subsampl": 10, "subsequ": 5, "subset": [2, 5], "subtre": 3, "success": 8, "suit": [2, 10], "suitabl": [3, 4], "sum": 3, "summar": [0, 1, 5, 7], "summari": [1, 7, 11], "support": [1, 2, 3, 4, 7, 11], "supported_file_format": [0, 1, 7], "supported_ipc_model": [0, 3, 7], "supported_metr": [0, 3, 4, 7, 10], "supported_models_param": [0, 3, 7], "supported_param": [0, 3, 7], "supported_regressors_map": [0, 3, 7], "supported_regressos_param": [0, 3, 7], "synthet": 10, "system": [4, 7], "systemat": 2, "t": [1, 2, 5, 9], "tailor": [5, 7], "target": [1, 3, 5], "target_column": 5, "target_column_nam": [1, 5, 6, 8, 9], "task": [1, 4], "termin": 2, "test": [1, 2, 3, 4, 5, 6, 8, 9, 10], "test_auc": 2, "test_data": [6, 8, 9], "test_data_i": 2, "test_data_shifted_0": 8, "test_data_shifted_1": [6, 9], "test_data_x": 2, "test_dataset": 6, "test_record": [2, 3], "test_result": [2, 8], "test_statist": 6, "test_strategi": [3, 6, 9], "test_trajectori": 2, "testing_mpc_valu": 3, "testing_set": 5, "than": [1, 3], "thank": 7, "thei": [1, 4, 5, 10], "them": [1, 2, 3, 4], "therebi": 3, "therefor": 4, "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10], "those": [4, 5], "threshold": [1, 2, 3, 4, 5, 10], "through": [2, 3, 4, 5, 6, 7, 9], "time": [1, 2, 3], "to_datafram": [0, 1, 5, 7], "to_dict": [0, 2, 3, 7], "to_serializ": [0, 3, 7], "todataframesstrategi": [0, 4, 7], "todmatrixstrategi": [0, 4, 7, 10], "tonumpystrategi": [0, 4, 7], "tool": [2, 3, 4, 7, 10], "total": 3, "track": [2, 3], "tradit": 3, "train": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "train_data": [6, 8], "train_to_disagre": [0, 4, 7], "training_dataset": [5, 6], "training_param": [2, 3, 10], "training_paramet": [4, 10], "training_set": 5, "trajectori": 2, "transcend": 3, "transform": [3, 4, 10], "transform_to_profil": [0, 3, 7], "tree": [0, 7, 9], "tree_file_path": 3, "tree_method": 10, "tree_model": 3, "treenod": 3, "treerepresent": [0, 3, 7], "trim": 2, "trim_data": 2, "true": [1, 2, 3, 4, 5, 9, 10], "true_label": [1, 5], "trustworthi": 3, "tupl": [1, 2, 4], "tutori": [5, 6, 8, 9], "two": [1, 2, 3, 6, 7, 11], "type": [1, 2, 3, 4, 9, 10], "typeerror": 4, "typic": 4, "u": [2, 10], "u_statist": 6, "uncertainti": [0, 7, 9], "uncertainty_metr": [3, 9], "uncertaintycalcul": [0, 3, 7], "uncertaintymetr": [0, 3, 7], "unchang": 5, "under": [2, 3, 7], "underli": [4, 10], "underlying_models_map": [0, 3, 7], "undermin": 2, "understand": [3, 7, 10], "uniform": [2, 4], "union": [2, 3], "uniqu": 2, "unless": 3, "unnecessari": [2, 7], "unseen": 6, "unwant": 5, "up": [2, 5, 7, 11], "updat": [0, 2, 3, 4, 7, 10], "update_detectron_result": [0, 3, 7], "update_metrics_result": [0, 3, 7], "update_min_confid": [0, 3, 7], "update_node_inform": [0, 3, 7], "update_param": [0, 4, 7], "updater_seq": 10, "upon": 5, "us": [1, 2, 3, 4, 6, 8, 9, 11], "usabl": [1, 7], "usag": [4, 5, 7], "use_ref_model": 3, "user": [3, 7], "util": [1, 2, 4, 6, 7, 9, 10], "val_data": [6, 8], "val_data_i": 2, "val_data_x": 2, "valid": [1, 2, 3, 4, 5, 6, 8, 10], "valid_param_set": 4, "validate_param": [0, 4, 7], "validate_paramet": 10, "validation_auc": 2, "validation_dataset": 6, "validation_set": 5, "valu": [1, 2, 3, 4, 5], "valuabl": 3, "valueerror": [1, 2, 4], "varieti": [1, 4], "variou": [1, 2, 3, 4, 5, 7, 10], "vector": [1, 5], "verbos": 3, "verifi": [5, 7], "versatil": 1, "version": [3, 4], "via": 7, "wa": [1, 3, 8], "wai": 1, "wait": 2, "want": [6, 9], "warm_start": 3, "we": [6, 7, 10], "weight": [3, 4], "welcom": 8, "well": [1, 2], "were": [5, 9], "when": [1, 2, 3, 5, 10], "where": [2, 3, 4, 7], "whether": [1, 2, 3, 4, 10], "which": [1, 2, 3, 4, 5, 6, 10], "while": 6, "whilst": 2, "whitnei": 2, "whole": [3, 9], "why": 3, "within": [2, 3, 4, 7, 10], "without": [2, 4, 7], "work": [7, 11], "workflow": [1, 7], "world": [3, 7], "wrapper": [1, 10], "x": [3, 4], "x_test": [4, 10], "x_train": [4, 10], "x_val": [5, 10], "x_valid": 4, "xgb": [4, 10], "xgb_model": 10, "xgb_model_pkl": 10, "xgb_param": 10, "xgbclassifi": 4, "xgboost": [4, 10], "xgboostfactori": [0, 4, 7], "xgboostmodel": [0, 4, 7, 10], "y": [3, 4], "y_pred": [4, 10], "y_test": [4, 10], "y_train": [4, 10], "y_true": [3, 4, 6], "y_val": [5, 10], "y_valid": 4, "yet": 4, "you": [5, 6, 7, 8, 9, 10], "your": [5, 6, 7, 9, 10], "ysed": 3, "z": [2, 6]}, "titles": ["&lt;no title&gt;", "datasets subpackage", "detectron subpackage", "med3pa subpackage", "models subpackage", "Working with datasets subpackage", "Working with the Detectron Subpackage", "Welcome to MED3pa documentation!", "Installation Guide", "Working with the med3pa Subpackage", "Working with the Models Subpackage", "&lt;no title&gt;"], "titleterms": {"1": [5, 6, 8, 9, 10], "2": [5, 6, 8, 9, 10], "3": [5, 6, 9, 10], "4": [5, 6, 9, 10], "5": [5, 6, 9, 10], "6": [5, 6, 9], "7": 5, "abstract_metr": 4, "abstract_model": 4, "advanc": 3, "an": [5, 10], "analysi": 3, "analyz": [6, 9], "applic": 7, "base": 4, "basic": 8, "class": [5, 10], "classification_metr": 4, "compar": [6, 9], "comparaison": 2, "compon": 3, "compraison": 3, "concrete_classifi": 4, "concrete_regressor": 4, "configur": [6, 9], "consist": 5, "creat": [5, 10], "data": 5, "data_strategi": 4, "dataset": [1, 5, 6, 9], "datasetsmanag": 5, "detectron": [2, 6, 9], "discov": 10, "document": 7, "engin": 7, "ensembl": 2, "ensur": 5, "evalu": 10, "exampl": 8, "experi": [2, 3, 6, 9], "extens": 3, "factori": 4, "featur": 5, "from": [9, 10], "function": 7, "get": 5, "guid": [7, 8], "import": [5, 10], "indic": 7, "inform": 10, "instal": [7, 8], "instanc": [5, 10], "integr": 3, "kei": [3, 7], "load": [5, 10], "loading_context": 1, "loading_strategi": 1, "manag": 1, "mask": 1, "maskeddataset": 5, "mdr": 3, "med3pa": [3, 7, 9], "model": [3, 4, 6, 9, 10], "modelfactori": 10, "modul": [1, 2, 3, 4, 5, 10], "necessari": [5, 10], "oper": 5, "output": 5, "overview": [1, 2, 3, 4, 7], "packag": 7, "perform": 5, "pip": 8, "predict": 10, "prerequisit": 8, "pretrain": 9, "principl": 7, "profil": 3, "record": 2, "regression_metr": 4, "reset": 5, "result": [6, 9], "retriev": [5, 10], "run": [6, 9], "save": [5, 6, 9, 10], "serial": 10, "set": [6, 9], "softwar": 7, "specifi": 10, "state": 10, "step": [5, 6, 8, 9, 10], "stopper": 2, "strategi": 2, "subpackag": [1, 2, 3, 4, 5, 6, 7, 9, 10], "summari": 5, "support": 10, "tabl": 7, "train": 10, "tree": 3, "tutori": [7, 11], "two": 9, "uncertainti": 3, "up": [6, 9], "us": [5, 7, 10], "usag": 8, "verifi": 8, "via": 8, "welcom": 7, "work": [5, 6, 9, 10]}})